{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"npstyping","title":"Home"},{"location":"#npstyping","text":"","title":"npstyping"},{"location":"api/","text":"API Documentation npstyping \u2013 Numpy shape typing. Classes: Name Description ShapeError An automatically strict shape type check by SType was not successfully. Colon Colon using in SType. STypeLike Type class for values which are convertible to SType. SType Shape format descriptor. sndarray Numpy array with shape restiction behavior. ShapeError An automatically strict shape type check by SType was not successfully. Colon Colon using in SType. Class can be used to check for a colon independing the colon from this class or Literal[\":\"] by using isinstance(). Methods: Name Description __repr__ Return Colon type (is represented by character ':'). __str__ Return string representation of Colon type is ':'. __repr__ () Return Colon type (is represented by character ':'). __str__ () Return string representation of Colon type is ':'. STypeLike Type class for values which are convertible to SType. The only function is typechecking of an object via \"isinstance\". It returns True in case the value is of type SType or convertible into SType (by using class SType). SType Shape format descriptor. Has the functions as: tuple based data type to describe shape restrictions (as more restricted format than STypeLike) converter from STypeLike shape restriction to tuple based SType checker for numpy.ndarray shape against the SType shape restriction SType(\":, 3, ...\") == (Colon, 3, ...) SType(\":, 2\").check_ndarray(np.asarray([[1, 2], [3,4], [5,6]])) == True Methods: Name Description __init__ Create a instance of SType with a value what is of type SType or convertible into it. stype Set SType with a SType value or a convertible value (STypeLike). check_ndarray Check an numpy array(-like) object for the shape. __repr__ Representation of the value of SType. __eq__ Check the value against an other valid value. __iter__ Implement iter(self). __getitem__ Implement getitem(self). __len__ Return len(self). __str__ Return the string representation. __contains__ Return key in self. __init__ ( stype_like ) Create a instance of SType with a value what is of type SType or convertible into it. stype ( stype_like ) Set SType with a SType value or a convertible value (STypeLike). _to_stype ( shape ) classmethod Make any STypeLike object to a SType signature as a more standardised writing of the strictly typed shape. check_ndarray ( array ) Check an numpy array(-like) object for the shape. The return value is a boolean. No Exception will be raised if the chape is not correct. __repr__ () Representation of the value of SType. __eq__ ( other ) Check the value against an other valid value. __iter__ () Implement iter(self). __getitem__ ( index ) Implement getitem(self). __len__ () Return len(self). __str__ () Return the string representation. __contains__ ( item ) Return key in self. sndarray Numpy array with shape restiction behavior. Methods: Name Description __new__ Create sndarray class. check_stype Check the array by shape restrictions. __getattribute__ Overwrtes the method to add some functionality around the numpy methods. Attributes: stype ( SType ) \u2013 Return stype attribute. stype property writable Return stype attribute. __new__ ( a , dtype = None , order = None , * , stype = None , auto_shape_check = False , device = None , copy = None , like = None ) Create sndarray class. check_stype ( stype_like = None ) Check the array by shape restrictions. Returns the result, but doesn't raise a ShapeError exception. Parameters: stype_like ( STypeLike | None , default: None ) \u2013 Set the 'stype' property before the check. Otherwise uses the value of this property, by default None Returns: bool \u2013 True, if the arrays shape is positive validated by the shape type property 'stype'. Otherwise false. __getattribute__ ( name ) Overwrtes the method to add some functionality around the numpy methods.","title":"API"},{"location":"api/#api-documentation","text":"npstyping \u2013 Numpy shape typing. Classes: Name Description ShapeError An automatically strict shape type check by SType was not successfully. Colon Colon using in SType. STypeLike Type class for values which are convertible to SType. SType Shape format descriptor. sndarray Numpy array with shape restiction behavior.","title":"API Documentation"},{"location":"api/#npstyping.npstyping.ShapeError","text":"An automatically strict shape type check by SType was not successfully.","title":"ShapeError"},{"location":"api/#npstyping.npstyping.Colon","text":"Colon using in SType. Class can be used to check for a colon independing the colon from this class or Literal[\":\"] by using isinstance(). Methods: Name Description __repr__ Return Colon type (is represented by character ':'). __str__ Return string representation of Colon type is ':'.","title":"Colon"},{"location":"api/#npstyping.npstyping.Colon.__repr__","text":"Return Colon type (is represented by character ':').","title":"__repr__"},{"location":"api/#npstyping.npstyping.Colon.__str__","text":"Return string representation of Colon type is ':'.","title":"__str__"},{"location":"api/#npstyping.npstyping.STypeLike","text":"Type class for values which are convertible to SType. The only function is typechecking of an object via \"isinstance\". It returns True in case the value is of type SType or convertible into SType (by using class SType).","title":"STypeLike"},{"location":"api/#npstyping.npstyping.SType","text":"Shape format descriptor. Has the functions as: tuple based data type to describe shape restrictions (as more restricted format than STypeLike) converter from STypeLike shape restriction to tuple based SType checker for numpy.ndarray shape against the SType shape restriction SType(\":, 3, ...\") == (Colon, 3, ...) SType(\":, 2\").check_ndarray(np.asarray([[1, 2], [3,4], [5,6]])) == True Methods: Name Description __init__ Create a instance of SType with a value what is of type SType or convertible into it. stype Set SType with a SType value or a convertible value (STypeLike). check_ndarray Check an numpy array(-like) object for the shape. __repr__ Representation of the value of SType. __eq__ Check the value against an other valid value. __iter__ Implement iter(self). __getitem__ Implement getitem(self). __len__ Return len(self). __str__ Return the string representation. __contains__ Return key in self.","title":"SType"},{"location":"api/#npstyping.npstyping.SType.__init__","text":"Create a instance of SType with a value what is of type SType or convertible into it.","title":"__init__"},{"location":"api/#npstyping.npstyping.SType.stype","text":"Set SType with a SType value or a convertible value (STypeLike).","title":"stype"},{"location":"api/#npstyping.npstyping.SType._to_stype","text":"Make any STypeLike object to a SType signature as a more standardised writing of the strictly typed shape.","title":"_to_stype"},{"location":"api/#npstyping.npstyping.SType.check_ndarray","text":"Check an numpy array(-like) object for the shape. The return value is a boolean. No Exception will be raised if the chape is not correct.","title":"check_ndarray"},{"location":"api/#npstyping.npstyping.SType.__repr__","text":"Representation of the value of SType.","title":"__repr__"},{"location":"api/#npstyping.npstyping.SType.__eq__","text":"Check the value against an other valid value.","title":"__eq__"},{"location":"api/#npstyping.npstyping.SType.__iter__","text":"Implement iter(self).","title":"__iter__"},{"location":"api/#npstyping.npstyping.SType.__getitem__","text":"Implement getitem(self).","title":"__getitem__"},{"location":"api/#npstyping.npstyping.SType.__len__","text":"Return len(self).","title":"__len__"},{"location":"api/#npstyping.npstyping.SType.__str__","text":"Return the string representation.","title":"__str__"},{"location":"api/#npstyping.npstyping.SType.__contains__","text":"Return key in self.","title":"__contains__"},{"location":"api/#npstyping.npstyping.sndarray","text":"Numpy array with shape restiction behavior. Methods: Name Description __new__ Create sndarray class. check_stype Check the array by shape restrictions. __getattribute__ Overwrtes the method to add some functionality around the numpy methods. Attributes: stype ( SType ) \u2013 Return stype attribute.","title":"sndarray"},{"location":"api/#npstyping.npstyping.sndarray.stype","text":"Return stype attribute.","title":"stype"},{"location":"api/#npstyping.npstyping.sndarray.__new__","text":"Create sndarray class.","title":"__new__"},{"location":"api/#npstyping.npstyping.sndarray.check_stype","text":"Check the array by shape restrictions. Returns the result, but doesn't raise a ShapeError exception. Parameters: stype_like ( STypeLike | None , default: None ) \u2013 Set the 'stype' property before the check. Otherwise uses the value of this property, by default None Returns: bool \u2013 True, if the arrays shape is positive validated by the shape type property 'stype'. Otherwise false.","title":"check_stype"},{"location":"api/#npstyping.npstyping.sndarray.__getattribute__","text":"Overwrtes the method to add some functionality around the numpy methods.","title":"__getattribute__"}]}